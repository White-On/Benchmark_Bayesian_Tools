[Learning_structure_large_sampling]
; nb_runs = 30
arguments = 5000,7500,10000,20000,30000,40000,50000,60000,70000,80000,90000,100000
keyword = bif,Bayesian network, Learning structure, Learning parameters
before_script = before_task
before_function = createSamples
before_task_arguments = {'sample_size' : [5000,7500,10000,20000,30000,40000,50000,60000,70000,80000,90000,100000], 'bifFile' : 'alarm.bif' }
file_used = alarm.bif
evaluation_language = python
evaluation_script = evaluation
evaluation_function = evaluateFscore evaluatePrecision evaluateRecall
timeout = 180
arguments_description = Number of samples

extra_html_element = alarm.html
description = Learning a Bayesian network refers to the process of automatically constructing 
    a Bayesian network model from data, without specifying the network structure or conditional 
    probability distributions beforehand. The goal is to compare the learned structure of the Bayesian
    network alarm.bif from data for each target.
    <b>A word of caution</b>: For some targets, the learned structure is incomplete for low number of samples.
    To still be able to compare the performance of the algorithms, we manually add the missing nodes and only
    the missing nodes to the learned structure ( the CPDs and the arcs are not modified ).

extra_description = All our targets have to learn the structure of the Bayesian network
    alarm.bif from data. The learning process is done with the best algorithm for each target.
    We then compare the performance of each algorithm by computing the Fscore, Recall and Precision of the learned
    structure with respect to the true structure.

task_scale = auto
post_task_scale = linear

task_xlabel = Number of samples
task_ylabel = Time (s)
task_title = Learning time of the best algorithm for each target
task_display = line
post_task_xlabel = Number of samples
post_task_ylabel = Fscore Precision Recall
post_task_title = Fscore of the best algorithm for each target, Precision of the best algorithm for each target, Recall of the best algorithm for each target
post_task_display = line

active = True